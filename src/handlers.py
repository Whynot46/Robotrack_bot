from aiogram.filters.command import Command
from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardRemove
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import src.keyboards as kb
import src.db as db
import src.config as config
import re


router = Router()


class User_data(StatesGroup):
    child_name = State()
    child_age = State()
    parent_number = State()


class Lesson_record(StatesGroup):
    week = State()
    weekday = State()
    lesson = State()


@router.message(Command("start"))
async def start_loop(message: Message, state = FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏–∑ –†–æ–±–æ—Ç—Ä–µ–∫–∞ü§ñ\n"
                "–•–æ—á–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?üìÖ\n"
                "–•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ?‚úçüèª\n"
                "–•–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º?üì±\n"
                "–ù–∞ —ç—Ç–∏ –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã —è —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ –∑–¥–µ—Å—å!üòÑ")

    if not db.is_old(message.from_user.id):
        await state.set_state(User_data.child_name)
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—èüòâ\n"
                    "–£–∫–∞–∂–∏—Ç–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞", reply_markup=ReplyKeyboardRemove())
    else:
        if db.is_admin(message.from_user.id):
            await message.answer("–ü–æ–º–Ω—é –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üßëüèª‚Äçüîß\n–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=kb.admin_keyboard)
        else:
            await message.answer("–Ø –í–∞—Å –ø–æ–º–Ω—éüòÑ\n"
                        "–î–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –∂–µ –ø–µ—Ä–µ–π–¥—ë–º –∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –í–∞—Å –≤–æ–ø—Ä–æ—Å–∞–º!", reply_markup=kb.user_keyboard)


@router.message(User_data.child_name)
async def put_name(message: Message, state = FSMContext):
    await state.update_data(child_name = message.text)
    await state.set_state(User_data.child_age)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –í–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(User_data.child_age)
async def put_birthdate(message: Message, state = FSMContext):
    if config.check_date(message.text):
        await state.update_data(child_age = message.text)
        await state.set_state(User_data.parent_number)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è")
    else:
        await state.set_state(User_data.child_age)
        await message.answer("üòÆ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É")


@router.message(User_data.parent_number)
async def put_parent_number(message: Message, state = FSMContext):
    phone_pattern = r'^(\+?7|8)[\s\-]?(\(?\d{3}\)?)?[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})$'
    if re.match(phone_pattern, message.text) is not None:
        await state.update_data(parent_number = message.text)
        user_data = await state.get_data()
        db.add_new_user(message.from_user.id, message.from_user.username, user_data['child_name'], user_data['child_age'], user_data['parent_number'])
        await state.set_state(None)
        await message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=kb.user_keyboard)
    else:
        await state.set_state(User_data.parent_number)
        await message.answer("üòÆ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@router.message(Command("admin"))
async def open_admin_panel(message: Message):
    if db.is_admin(message.from_user.id):
        await message.answer("üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel_keyboard)
    else:
        await message.answer("üëÆüèª‚Äç‚ôÇÔ∏è–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.user_keyboard)


@router.message(F.text == "üßëüèª‚Äçüíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")  
async def get_user_profile(message: Message):  
    await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{db.get_username(message.from_user.id)}\n"
                        f"–§–ò–û —Ä–µ–±—ë–Ω–∫–∞: {db.get_child_name(message.from_user.id)}\n"
                        f"–î–† —Ä–µ–±—ë–Ω–∫–∞: {db.get_child_birthday(message.from_user.id)} ({config.calculate_age(db.get_child_birthday(message.from_user.id))} –ª–µ—Ç)\n"
                        f"–ù–æ–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è: {db.get_parent_number(message.from_user.id)}"
                        , reply_markup=kb.user_profile_keyboard)


@router.message(F.text == "‚óÄÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")  
async def get_shedule(message: Message):  
    if db.is_admin(message.from_user.id):
        await message.answer("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = kb.admin_keyboard)
    else:
        await message.answer("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = kb.user_keyboard)


@router.message(F.text == "üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")  
async def get_shedule(message: Message):  
    if db.is_admin(message.from_user.id):
        await message.answer("üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel_keyboard)
    else:
        await message.answer("üëÆüèª‚Äç‚ôÇÔ∏è–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.user_keyboard)


@router.message(F.text == "üôãüèª‚Äç‚ôÇÔ∏è–ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è")  
async def get_shedule(message: Message):
    user_lessons = db.get_user_lessons(message.from_user.id) 
    
    if len(user_lessons)>0:
        user_lessons_str = ""
        for lesson in user_lessons:
            user_lessons_str += f"{lesson[2]} {lesson[3]}\n{lesson[0]} {lesson[1]}\n\n"

        await message.answer(f"üßëüèª‚Äçüè´–í–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è:\n\n{user_lessons_str}", reply_markup=kb.user_keyboard)

    else:
        await message.answer("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ üò¢", reply_markup = kb.user_keyboard)


@router.message(F.text == "üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")  
async def get_shedule(message: Message):
    if db.is_admin(message.from_user.id):
        await message.answer_photo(caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2024/2025 –≥–æ–¥", photo=FSInputFile("./img/shedule_2024-2025.png"), reply_markup=kb.admin_keyboard)
    else:
        await message.answer_photo(caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2024/2025 –≥–æ–¥", photo=FSInputFile("./img/shedule_2024-2025.png"), reply_markup=kb.user_keyboard)


@router.message(F.text == "üè†–û –Ω–∞—Å")  
async def get_shedule(message: Message):  
    await message.answer("–î–µ—Ç—Å–∫–∏–π –∫–ª—É–± —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ –†–æ–±–æ—Ç—Ä–µ–∫\n"
                        "–ù–∞—à –∞–¥—Ä–µ—Å - —É–ª. –°–∞–≤—É—à–∫–∏–Ω–∞, 4, –∫–æ—Ä–ø. 6 (–æ—Ñ–∏—Å 307, —ç—Ç–∞–∂ 3)\n"
                        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - –í—Ç-–í—Å 10:00‚Äì20:00\n"
                        "TG - https://t.me/s/robotrackast\n"
                        "VK - https://vk.com/robotrackast\n"
                        , reply_markup=kb.about_us_keyboard)


@router.message(F.text == "üßëüèª‚Äçüè´–ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")  
async def get_shedule(message: Message):
    if db.is_admin(message.from_user.id):
        await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†", reply_markup = kb.admin_keyboard)
    else:
        await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†", reply_markup = kb.user_keyboard)


@router.message(F.text == "üôãüèª‚Äç‚ôÇÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ")  
async def sign_up(message: Message, state = FSMContext):
    await state.set_state(Lesson_record.week)
    await message.answer("–ö–∞–∫–∞—è –Ω–µ–¥–µ–ª—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.get_week_keyboard())


@router.message(Lesson_record.week)
async def put_weekday(message: Message, state = FSMContext):
    if message.text != "‚ùå–û—Ç–º–µ–Ω–∞":
        await state.update_data(Lesson_record = message.text)
        await state.set_state(Lesson_record.weekday)
        if message.text[:14] == "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=kb.get_weekday_keyboard(config.get_current_week()))
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=kb.get_weekday_keyboard(config.get_next_week()))
    else:
        await state.clear()
        if db.is_admin(message.from_user.id):
            await message.answer("üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel_keyboard)
        else:
            await message.answer("‚ùå–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.user_keyboard)


@router.message(Lesson_record.weekday)
async def put_weekday(message: Message, state = FSMContext):
    if message.text != "‚ùå–û—Ç–º–µ–Ω–∞":
        await state.update_data(weekday = message.text)
        await state.set_state(Lesson_record.lesson)
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}", reply_markup=kb.get_lessons_keyboard((message.text).split('\n')[0]))
    else:
        await state.clear()
        if db.is_admin(message.from_user.id):
            await message.answer("üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel_keyboard)
        else:
            await message.answer("‚ùå–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.user_keyboard)


@router.message(Lesson_record.lesson)
async def put_lesson(message: Message, state = FSMContext):
    if message.text != "‚ùå–û—Ç–º–µ–Ω–∞":
        await state.update_data(lesson = message.text)
        data = await state.get_data()
        weekday, date = (data['weekday']).split("\n")
        topic, time = (data['lesson']).split("\n")
        topic, age = topic.split(" ", maxsplit=1)

        if db.is_admin(message.from_user.id):
            students = db.get_lesson_children(date, time, topic, age)
            if len(students)>0:
                students_str = '\n'.join(students)
                await message.answer(f"{topic} {age} {time}\n"
                                    f"{weekday} {date}\n\n"
                                    f"{students_str}", reply_markup=kb.edit_children_keyboard)
            else:
                await state.clear()
                await message.answer("–ù–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—èüò≠", reply_markup=kb.admin_panel_keyboard)

        else:
            if db.sign_up_to_lesson(date, time, topic, age, message.from_user.id): 
                await message.answer(f"‚úÖ–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Ä–æ–∫\n"
                                    f"{topic} {age} {time}\n"
                                    f"{weekday} {date}", reply_markup=kb.user_keyboard)
            elif db.sign_up_to_lesson(date, time, topic, age, message.from_user.id) == False:
                await message.answer(f"üòî–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–º –∑–∞–Ω—è—Ç–∏–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", reply_markup=kb.admin_panel_keyboard)
            elif db.sign_up_to_lesson(date, time, topic, age, message.from_user.id) == None:
                await message.answer("üôãüèª‚Äç‚ôÇÔ∏è–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫", reply_markup=kb.user_keyboard)
    else:
        await state.clear()
        if db.is_admin(message.from_user.id):
            await message.answer("üõ†–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel_keyboard)
        else:
            await message.answer("‚ùå–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.user_keyboard)


@router.message(F.text == "üìã–ó–∞–Ω—è—Ç–∏—è")  
async def open_admin_panel(message: Message, state = FSMContext):
    if db.is_admin(message.from_user.id):
        await state.set_state(Lesson_record.week)
        await message.answer("–ö–∞–∫–∞—è –Ω–µ–¥–µ–ª—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.get_week_keyboard())


@router.message(F.text == "üôãüèª‚¨áÔ∏è–í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î")  
async def open_admin_panel(message: Message):
    if db.is_admin(message.from_user.id):
        await message.answer("–ö–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å?", reply_markup = kb.db_keyboard)

        
@router.message(F.text == "üëæ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")  
async def open_admin_panel(message: Message):
    if db.is_admin(message.from_user.id):
        admins = db.get_admins_list()
        admins_str = ""
        for admin in admins:
            admins_str +=  f"@{admin[1]} ({admin[0]})\n"

        await message.answer("üëæ–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
                            f"{admins_str}", reply_markup = kb.edit_admin_keyboard)
      

@router.callback_query(F.data == "edit_children_list")
async def edit_children_list(callback: CallbackQuery):
    lesson, children_str = callback.message.text.split("\n\n", 1)
    children = children_str.split("\n")
    await callback.message.edit_reply_markup(reply_markup=kb.get_children_keyboard(children))


@router.callback_query(F.data.startswith("chouse_"))
async def chouse_children_list(callback: CallbackQuery):
    lesson, child = callback.data.split("_", 1)
    await callback.message.edit_reply_markup(reply_markup=kb.get_accept_keyboard(child))


@router.callback_query(F.data.startswith("delete_"))
async def chouse_children_list(callback: CallbackQuery):
    _, child = callback.data.split("_", 1)

    lesson, children_str = callback.message.text.split("\n\n", 1)
    part_1, part_2 = lesson.split("\n")
    topic_age, time = part_1.rsplit(" ", 1)
    topic, age = topic_age.split(" ", 1)
    weekday, date = part_2.split(" ", 1)
    db.delete_child_from_lesson(child, date, time, topic, age)

    children = db.get_lesson_children(date, time, topic, age)
    children_str  = '\n'.join(children)

    await callback.message.edit_text(text=f"{lesson}\n\n{children_str}")
    await callback.message.edit_reply_markup(reply_markup=kb.get_children_keyboard(children))


@router.callback_query(F.data.startswith("cancel_"))
async def chouse_children_list(callback: CallbackQuery):
    lesson, children_str = callback.message.text.split("\n\n", 1)
    children = children_str.split("\n")
    await callback.message.edit_reply_markup(reply_markup=kb.get_children_keyboard(children))
        

@router.callback_query(F.data == "users_data")
async def send_random_value(callback: CallbackQuery):
    db.get_users_data()
    await callback.message.answer_document(FSInputFile("./db/users_data.xlsx"))
    

@router.callback_query(F.data == "shedule_data")
async def send_random_value(callback: CallbackQuery):
    db.get_shedule_data()
    await callback.message.answer_document(FSInputFile("./db/shedule_data.xlsx"))


@router.callback_query(F.data == "lessons_data")
async def send_random_value(callback: CallbackQuery):
    db.get_lessons_data()
    await callback.message.answer_document(FSInputFile("./db/lessons_data.xlsx"))